#!/usr/bin/python

import sys
sys.path.append("./include/midi/")
sys.path.append("./lib/")
sys.path.append("./include/")
import argparse
import time
from numpy import *
import alsaseq
import midi
import alsamidi

def parseEvent(ev):
	#The serial protocol is very simple:
	#	n;	note off
	#	NX;	note X on, where 0<=X<=44
	
	data=ev[7]
	out=""
	if ev[0]==6:
		#print "noteON "+str(data[1])
		out="N"+str(data[1])+";"
	if ev[0]==7:
		#print "noteOFF "+str(data[1])
		out="n;"
	return out;


try:
	parser = argparse.ArgumentParser(description='Markov chain generative music.')
	parser.add_argument('-b', '--bpm', help='Override original BPM in play mode', default='0', type=int)
	parser.add_argument('-c', '--channel', help='Override original midi channel in play mode', default='0', type=int)
	parser.add_argument('-p', '--port', help='Connect to ALSA sequencer port PORT', default='0', type=int)
	parser.add_argument('-v', '--verbose', help='Verbose output',action='store_const', const=True,default=False)
	parser.add_argument('filename', type=file, help='Filename (.mid|.mch)')
	args = parser.parse_args()

	CH=args.channel
	if (args.verbose):
		print "Midi channel",CH
		
	#Read transitions probability matrix from file
	first=True
	count=0
	for line in args.filename:
		if not (line[0] == "#" or line == ""):	#e' un commento o una riga vuota
			if (first):	#first line=number of states
				table=zeros([int(line),int(line)+1],float)
				first=False
			else:
				table[count]=line.split(",")
				count+=1
	args.filename.close()
	
	print "File successful readed."
	
	if (args.verbose):
		print "Transition probability matrix: \n",table
	
	print "Init sequencer interface..."
	alsaseq.client( 'MarkovEX', 0, 1, False )

	if not(args.port==0):
		print "connecting to ALSA seq port",args.port
		alsaseq.connectto( 0, args.port, 0 )

	alsaseq.start()
	while 1:
		#ev=alsamidi.noteevent(1, 60, 127, 10, 1000)
		#alsaseq.output( (6, 1, 0, 1, (5, 0), (0, 0), (0, 0), (0, 60, 127, 0, 100)) )
		ev=alsamidi.noteonevent(CH, 60, 127)
		alsaseq.output(ev)
		time.sleep(1)
		ev=alsamidi.noteoffevent(CH, 60, 127)
		alsaseq.output(ev)
		time.sleep(1)
except IOError:
	print "Unable to open file."
	sys.exit(0)
except KeyboardInterrupt:
	print "\nKeyboard interrupt. Exiting...\n"
	ev=alsamidi.allnoteoffevent(CH)
	alsaseq.output(ev)
	alsaseq.stop()
