#!/usr/bin/python

import sys
import string
sys.path.append("./include/midi/")
sys.path.append("./lib/")
import midi
import argparse
from numpy import *
import alsaseq

def parseEvent(ev):
	#The serial protocol is very simple:
	#	n;	note off
	#	NX;	note X on, where 0<=X<=44
	
	data=ev[7]
	out=""
	if ev[0]==6:
		#print "noteON "+str(data[1])
		out="N"+str(data[1])+";"
	if ev[0]==7:
		#print "noteOFF "+str(data[1])
		out="n;"
	return out;


try:
	parser = argparse.ArgumentParser(description='Markov chain generative music.')
	parser.add_argument('-b', '--bpm', help='Override original BPM in play mode', default='0', type=int)
	parser.add_argument('-c', '--channel', help='Override original midi channel in play mode', default='0', type=int)
	parser.add_argument('-v', '--verbose', help='Verbose output',action='store_const', const=True,default=False)
	parser.add_argument('filename', type=file, help='Filename (.mid|.mch)')
	args = parser.parse_args()

	#Read transitions probability matrix from file
	first=True
	count=0
	for line in args.filename:
		if not (line[0] == "#" or line == ""):	#e' un commento o una riga vuota
			if (first):	#first line=number of states
				table=zeros([int(line),int(line)+1],float)
				first=False
			else:
				table[count]=line.split(",")
				count+=1
	args.filename.close()
	
	print "File successful readed."
	
	if (args.verbose):
		print "Transition probability matrix: \n",table
	
	print "Init sequencer interface..."
	alsaseq.client( 'SeriaMIDI', 1, 0, False )
	while 1:
		if alsaseq.inputpending():
			ev = alsaseq.input()
			out=parseEvent(ev)
			if (out):
				print "->"+out
except IOError:
	print "Unable to open file."
	sys.exit(0)

