#!/usr/bin/python

#    markovex - Markov chain generative music
#
#   Copyright (c) 2010 Alessio Degani <alessio.degani@gmail.com>
#
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>

import sys
sys.path.append("./include/")
sys.path.append("./include/midi/")
sys.path.append("./include/markovex")
sys.path.append("./lib/")
import argparse
import string
import alsaseq
import midi
import alsamidi
import markov_synthesis as mks
import markov_analysis as mka

#Defining default parameter
defaultCH='0'
defaultSEQPORT='0'
defaultBPM='100'

try:
	#Argument definition and parsing
	parser = argparse.ArgumentParser(description='Markov chain generative music.')
	parser.add_argument('-b', '--bpm', help='Override original BPM (ONLY in play mode)', default=defaultBPM, type=int)
	parser.add_argument('-c', '--channel', help='Specify midi channel in play mode', default=defaultCH, type=int)
	parser.add_argument('-p', '--port', help='Connect to ALSA sequencer port PORT', default=defaultSEQPORT, type=int)
	parser.add_argument('-v', '--verbose', help='Verbose output',action='store_const', const=True,default=False)
	parser.add_argument('-P', '--play', help='When input midi file, play it immediately',action='store_const', const=True,default=False)
	parser.add_argument('filename', help='Filename (.mid|.mch)' , type=file)
	parser.add_argument('-o', '--outfile', help='Output file name (.mch)', default=0, type=str)
	args = parser.parse_args()

	#Arguments to constants
	CH=args.channel
	BPM=args.bpm
	SEQPORT=args.port
	
	VERBOSE=args.verbose
	#... and global vars VERBOSE on others modules
	mka.VERBOSE=VERBOSE
	mks.VERBOSE=VERBOSE
	
	PLAYNOW=args.play
	
	print "Markovex begins. Welcome to the world of chaos.\n"

	try:
		filetype=args.filename.name.split(".")[1]
	except IndexError:
		print "File type not allowed"
		sys.exit(1)
	
	if (filetype=="mch"):
		#Is a chain... read and play it!
		
		print "I'm reading the Markov Chain..."
		
		if (VERBOSE):
			print "Midi channel",CH

		#Read table from file
		(table,first_state,bpm)=mks.readTable(args.filename)
		
		#Init ALSA sequencer interface and writable client
		print "Init sequencer interface..."
		alsaseq.client( 'MarkovEX', 0, 1, False)

		#Autoconnect to a specified port (if argument -p are passed)
		if not(SEQPORT==0):
			print "connecting to ALSA seq port",SEQPORT
			alsaseq.connectto( 0, SEQPORT, 0 )

		#Play Markov chain on alsaseq
		if (BPM): bpm=BPM
		mks.playTable(table,first_state,bpm,alsaseq,CH)
		
	elif (filetype=="mid"):
		#Midi file: try to extimate the 2nd order markov chain
		
		print "I'm parsing the midi file to grab the Markov Chain..."
		
		#Parse midi file
		(noteList, songName, trackName, bpm)=mka.parseMidi(args.filename)
		
		#Create transition probability matrix
		(first_state, table)=mka.createTable(noteList, songName, bpm, CH)
		
		if (PLAYNOW):
			#If PLAYNOW true start to play markov chain
			print "Chaos begin..."
			#Init ALSA sequencer interface and writable client
			print "Init sequencer interface..."
			alsaseq.client( 'MarkovEX', 0, 1, False)

			#Autoconnect to a specified port (if argument -p are passed)
			if not(SEQPORT==0):
				print "connecting to ALSA seq port",SEQPORT
				alsaseq.connectto( 0, SEQPORT, 0 )
			
			if (BPM): bpm=BPM
			mks.playTable(table,first_state,bpm,alsaseq,CH)
		else:
			#otherwise write table to file
			mka.writeTableToFile(args.outfile,songName,trackName,bpm,table,first_state)
	else:
		#File not allowed
		print "File type not allowed"
		sys.exit(1)
	sys.exit(0)
except IOError:
	#Error reading File
	print "Unable to open file."
	sys.exit(1)
except KeyboardInterrupt:
	#CTRL+C interrupt
	print "\nKeyboard interrupt. Exiting...\n"
	#ALLNOTEOF
	ev=alsamidi.allnoteoffevent(CH)
	alsaseq.output(ev)
	#Stop sequencing
	alsaseq.stop()
	sys.exit(0)
